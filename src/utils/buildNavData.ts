// This file auto-generates navigation json files rootTopics.json and secondLevelTopics.json
// so we can consume it in a more efficient way in the app. This is performed at compile time
// so there's no penalty at run-time. Since it's not runtime we can afford to be a little
// more lenient here with typescript.
/* eslint-disable @typescript-eslint/no-explicit-any */
import fs from 'fs'

import { SideNavItem } from '../components/sideNav/types'
import navigationDataJson from '../content/navigationData.json'

export const getPaths = (item: SideNavItem): string[] => {
  const { path, items } = item
  let result = [path]
  if (items && items.length > 0) {
    for (let i = 0; i < items.length; i++) {
      result = result.concat(getPaths(items[i]))
    }
  }
  return result
}

const flattenChildren = (nodes: any) => {
  if (nodes && nodes.length > 0) {
    return nodes.map((n: any) => {
      const { label, path } = n
      return { label, path, allItems: getPaths(n) }
    })
  }
}

// Root topic with flattened children.
// Used in side nav to render current topics menu
const rootTopicsFlatChildren = flattenChildren(navigationDataJson)

// Second level topic with flattened children.
// The second level topics are displayed in algolia search results.
const secondLevelTopicsFlatChildren: SideNavItem[] = []
navigationDataJson.forEach(node => {
  const { items } = node
  if (items) {
    flattenChildren(items).forEach((f: SideNavItem) => secondLevelTopicsFlatChildren.push(f))
  }
})

const autoGeneratedDataDir = './autoGeneratedData'
if (!fs.existsSync(autoGeneratedDataDir)) {
  fs.mkdirSync(autoGeneratedDataDir)
}
fs.writeFileSync(`${autoGeneratedDataDir}/rootTopics.json`, JSON.stringify(rootTopicsFlatChildren))
fs.writeFileSync(`${autoGeneratedDataDir}/secondLevelTopics.json`, JSON.stringify(secondLevelTopicsFlatChildren))
